pRPN(1) 							       pRPN(1)



NAME
       pRPN - a portable RPN calculator


SYNOPSIS
       prpn [options]
       prpnc [options]

       prpn  is  the main, GUI, executable. prpnc is the command line version.
       prpnc is equivalent to prpn -c.


DESCRIPTION
       The pRPN program is a RPN calculator inspired by HP calculators of late
       80s.

OPTIONS
       -h, --help
	      Display a quick help screen and exit.

       -v --version
	      Display version information and exit.

       -c, --console
	      Run  in  console	mode. Useful for prpn only. prpnc runs only in
	      console mode.

       -w, --width width
	      Set width to width, measured in number of  characters.  Defaults
	      to 23.

       -h, --height height
	      Set  height  to height, measured in number of lines. Defaults to
	      5.

       --min-stack-height min-stack-height
	      Set minimum stack height to height, measured in number of lines.
	      Defaults to height. Only in console mode.

       -b, --batch
	      Batch mode, implies console mode.

       -z, --dry-run
	      Ignore rc files.

       -a, --class
	      Display class count before exiting.

       -d, --debug debug_option
	      Debug mode, requires a parameter.

COMMANDS
       Commands  are  followed by the number of arguments they take, in paren‐
       thesis. These arguments are taken from the stack.

       _HELP (0)
	      Display a help screen

       _HELP_FLAGS (0)
	      Display a help screen about flags

       _EXIT (0)
	      Quit program

       _ABOUT (0)
	      Display information about this program

       + (2)  Addition: x + y

       - (2)  Subtraction: x - y

       * (2)  Multiplication: x * y

       / (2)  Division: x / y

       ^ (2)  Power: x ^ y

       % (2)  Percentage: (x * y) / 100

       %CH (2)
	      Percentage change: 100 * (y - x) / x

       %T (2) Percentage of total: 100 * y / x

       MOD (2)
	      Modulus: x - y * FLOOR(x / y)

       MIN (2)
	      Minimum

       MAX (2)
	      Maximum

       COS (1)
	      Cosine

       SIN (1)
	      Sine

       TAN (1)
	      Tangent

       ACOS (1)
	      Arccos

       ASIN (1)
	      Arcsin

       ATAN (1)
	      Arctan

       LN (1) Logarihtm (e base)

       EXP (1)
	      Exponential

       NEG (1)
	      Opposite

       IP (1) Integer part

       FP (1) Fractional part

       FLOOR (1)
	      Greatest integer lower than or equal to x

       CEIL (1)
	      Lowest integer greater than or equal to x

       ABS (1)
	      Absolute of x

       SIGN (1)
	      Sign of x: can be -1, 0 or 1

       MANT (1)
	      Mantisse of x

       XPON (1)
	      Exponent of x

       INV (1)
	      1/x

       SQ (1) Square

       SQR (1)
	      Square root

       R->C (2)
	      Real to complex

       C->R (1)
	      Complex to real

       SAME (2)
	      Is identical

       == (2) Equal to

       <> (2) Different from

       < (2)  Lower than

       <= (2) Lower than or equal to

       > (2)  Greater than

       >= (2) Greater than or equal to

       DUP (1)
	      Copy the first item

       SWAP (2)
	      Exchange the first two items

       DROP (1)
	      Delete the first item

       CLEAR (0)
	      Clear the stack

       OVER (2)
	      Copy the second item

       DUP2 (2)
	      Copy the first two items

       DROP2 (2)
	      Delete the first two items

       ROT (3)
	      Move the third item to the first position

       ROLLD (1)
	      Move the first item to the Nth position

       ROLL (1)
	      Move the Nth item to the first position

       PICK (1)
	      Copy the Nth item

       DUPN (1)
	      Copy the n first items

       DROPN (1)
	      Delete the n first items

       DEPTH (0)
	      Get the number of items

       SF (1) Set flag

       CF (1) Clear flag

       FS? (1)
	      Return 1 if flag is set, 0 otherwise

       FC? (1)
	      Return 0 if flag is set, 1 otherwise

       FS?C (1)
	      Do FS? then clear flag

       FC?C (1)
	      Do FC? then clear flag

       ->STR (1)
	      Convert to string

       STR-> (0)
	      Convert from string

       SUB (3)
	      Extract content from a string or a list

       ->LIST (1)
	      Items to list

       LIST-> (1)
	      Extract items from list

       GET (2)
	      Get an item from a list or array

       GETI (2)
	      Get an item from a list or array by increments

       PUT (3)
	      Put an item into a list or array

       PUTI (3)
	      Put an item into a list or array by increments

       SIZE (1)
	      Dimension of a list or array

       ARRY-> (1)
	      Replace an array by all its elements

       ->ARRY (1)
	      Create an array from a list of elements

       CON (2)
	      Create a constant array

       TRN (1)
	      Transpose a matrix-type array

       RDM (2)
	      Modify the dimension of an array

       IDN (1)
	      Create an identity matrix

       EVAL (0)
	      Evaluate item

       STO (2)
	      Store value in variable name

       RCL (1)
	      Recall value from variable name

       PURGE (1)
	      Remove a variable

       VARS (0)
	      Get the list of variables in current directory

       PATH (0)
	      Get the list from root to current directory

       CRDIR (1)
	      Create a directory

       HOME (0)
	      Set root directory as the current one

       UP (0) Make the parent directory the current one

       BIN (0)
	      Use binary mode for binary integers

       OCT (0)
	      Use octal mode for binary integers

       DEC (0)
	      Use decimal mode for binary integers

       HEX (0)
	      Use hexadecimal mode for binary integers

       STWS (1)
	      Define the number of bits in binary integers (1 to 64)

       RCWS (0)
	      Get the number of bits in binary integers

       B->R (1)
	      Convert a binary integer into a real

       R->B (1)
	      Convert a real into a binary integer

       RCLF (0)
	      Save flag states in a binary integer

       STOF (1)
	      Read flag states from a binary integer

       WAIT (1)
	      Wait a number of seconds

       STD (0)
	      Set reals display to 'standard'

       SCI (1)
	      Set reals display to 'scientific'

       FIX (1)
	      Set reals display to 'fixed number of decimals'

       ENG (1)
	      Set reals display to 'engineering'

       CLLCD (0)
	      Clear the screen

       CLMF (0)
	      Clear the message flag

       DISP (2)
	      Display an item on a line of the screen

       _READ (1)
	      Read file and puts its content in the stack

       _WRITE (2)
	      Write the second item into the file named by the first item

       _HACK-REAL-MGMT (1)
	      Internal: tune real 'standard' display management

       _HACK-REAL-DOT (1)
	      Internal: set whether or not to keep a  trailing	dot  in  reals
	      display

       UNDO (0)
	      Undo last command, 50 levels by default

       _UNDO_LEVELS (1)
	      Define number of undo levels

       _UNDO_LEVELS? (0)
	      Get number of undo levels

OBJECT TYPES
       Data

       Real Number
	      1.23456e-25

       Complex Number
	      ( )  (123.45, 678.90)

       Binary Integer
	      #    # 123AB

       String " "  "RESULT"

       Vector [ ]  [1.23 4.56 7.89]

       Matrix [[ ]]	[[1.23 4.56] [6.54 3.21]]

       List   { }  {1.23 "ABC" # 45d}

       Names

       Name   ´ ´  ´CALC´

       Procedures

       Program
	      << >>	<< DUP + SWAP >>

       Algebraic
	      ´ ´  ´X+2*Y=Z´

PROGRAM CONTROL INSTRUCTIONS
       Note about booleans
	      A  test  (IF,  WHILE  or UNTIL, see below) takes one item in the
	      stack. The item must be of type  real.  Any  non-null  value  is
	      treated as TRUE, a null value is FALSE.
	      Below,  the term "bottom item of the stack" refers to the actual
	      object at level 1 of the stack.

       IF/THEN/ELSE/END sequence
	      Execute the instructions between IF and THEN.
	      Then, take the bottom item of the stack,	if  it	is  true  (see
	      above),  execute	the instructions between THEN and ELSE (or END
	      if ELSE is not provided), otherwise execute  the	ELSE  instruc‐
	      tions. ELSE is optional.

       Example 1
	      Take the first item in the stack and tell whether it is positive
	      or null, or negative
	      << IF 0 >= THEN "Positive or null value" ELSE  "Negative	value"
	      END >>

       Example 2
	      Always execute the THEN part
	      << IF 1 THEN "Always executed" ELSE "Never executed" END >>

       Example 3
	      Do nothing (!)
	      << IF 0 THEN "Never executed" END >>

       WHILE/REPEAT/END sequence
	      Execute the instructions between WHILE and REPEAT.
	      Then  take  the  bottom  item  of  the stack, if it is true (see
	      above), execute the instructions after REPEAT, then restart  the
	      sequence from the beginning of the WHILE.

       Example
	      Calculate  the  smallest	N  for which sum(i^2 with i taking all
	      integer values in the range 1..N) >= 100
	      << 0 0 -> n << WHILE DUP 100 < REPEAT n SQ + n 1 + 'n' STO END n
	      >> >>

       DO/UNTIL/END sequence
	      Execute  the  instructions  between  DO and UNTIL, then, between
	      UNTIL and END.
	      Then, take the bottom item of the stack,	if  it	is  true  (see
	      above), restart the sequence from the beginning of the DO.

       Example
	      Calculate  the  smallest	N  for which sum(1/i with i taking all
	      integer values in the range 1..N) >= 3
	      << 0 0 -> n << DO n 1 + 'n' STO n INV + UNTIL DUP 3 >= END n  >>
	      >>

       FOR|START/NEXT|STEP sequence
	      FOR  or START launches a loop. It takes two arguments, the first
	      argument (second level in the stack)  being  the	start  counter
	      value,  the second one (first level in the stack) being the tar‐
	      get counter value, beyond which to stop the loop.
	      START is an anonymous loop, FOR takes one name and uses it as  a
	      local variable for the loop counter.
	      NEXT  adds  1  to  the counter if the target is greater than the
	      start, subtracts 1 otherwise.
	      STEP takes one argument in the stack and adds it to the counter.
	      NEXT can be used with either FOR or START, same with STEP.

       Example 1
	      Calculate the sum of the squares of the integers from 1 to 10
	      << 0 1 10 FOR i i SQ + NEXT >>

       Example 2
	      Calculate  sum(2^i with i taking all integer values in the range
	      1..N), N being the first value in the stack
	      << 0 1 1 4 ROLL START 2 * DUP ROT + SWAP NEXT >>

       Example 3
	      Calculate sum(i with i taking all  odd  integer  values  in  the
	      range 1..N), N being the first value in the stack
	      << 0 1 ROT FOR i i + 2 STEP >>

       RPL Documentation
	      RPL is HP language provided on top of RPN calculators.
	      http://en.wikipedia.org/wiki/RPL_%28programming_language%29

INITIALIZATION FILES
       ~/.prpn/stackrc
	      Settings and stack content.

       ~/.prpn/varsrc
	      Variables structure, and actual working directory.

AUTHOR
       Written by Sébastien Millet <sebastien.millet1@club-internet.fr>.
       Permission  is  granted to copy, distribute and/or modify this document
       under the terms of the GNU General Public License, Version 3  published
       by the Free Software Foundation.

BUGS
       Difference between prpn and prpnc

       Linux  prpn  can be run with -c option. In that case it is almost iden‐
	      tical to prpnc. "Almost" only. prpn is compiled  with  WxWidgets
	      library  and performs GUI-specific initializations upon startup.
	      If graphical resources aren't found, it won't execute. For exam‐
	      ple, if you run the following command
		   DISPLAY="" prpn -c
	      You get this result
		   Error: Unable to initialize gtk, is DISPLAY set properly?
	      prpnc  solves  this  situation,  as it is *not* compiled against
	      WxWidgets and can run in a simple  terminal  with  no  graphical
	      resources  at all. Note a clean way to improve all this would be
	      to prevent WxWidgets from initializing the GUI  whenever	-c  is
	      provided.  If  you know how to do that in a robust way (portable
	      across systems and versions...), this program' author is	inter‐
	      ested!

       Windows
	      prpn.exe	can  *not* be run with -c. For some reason, under Win‐
	      dows, WxWidgets disconnects the running program  from  the  con‐
	      trolling	terminal.  The	solutions is the same as Linux' except
	      that under Windows, it is mandatory: you must run  prpnc.exe  if
	      you wish to use the command line version of the calculator.



October 03, 2010		 version 0.5.1			       pRPN(1)
